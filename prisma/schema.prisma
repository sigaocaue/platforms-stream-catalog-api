generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  id                  String                @id @default(uuid())
  name                String
  pseudonym           String?
  birthDate           DateTime?
  nationality         String?
  ContentContribution ContentContribution[]
}

model StreamingPlatform {
  name    String  @id @default(uuid())
  website String?

  contentAvailabilities ContentAvailability[]
}

model ContentType {
  name     String    @id
  contents Content[]
}

model ContributionRole {
  name                String                @id
  description         String?
  ContentContribution ContentContribution[]
}

model Content {
  id                  String                @id @default(uuid())
  contentTypeName     String
  title               String
  releaseDate         DateTime?
  imdbRating          Float?
  duration            Int?
  storyline           String?
  contentType         ContentType           @relation(fields: [contentTypeName], references: [name], onDelete: Restrict, onUpdate: Cascade)
  contentAvailability ContentAvailability[]
  contentPersons      ContentContribution[]
  contentTitle        ContentTitle[]

  @@unique([contentTypeName, title, releaseDate])
}

model ContentAvailability {
  streamingPlatformId String
  contentId           String
  entryDate           DateTime
  exitDate            DateTime?

  content           Content           @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  streamingPlatform StreamingPlatform @relation(fields: [streamingPlatformId], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@id([streamingPlatformId, contentId, entryDate])
  @@unique([streamingPlatformId, contentId, exitDate])
}

model ContentTitle {
  contentId  String
  country    String
  localTitle String

  content Content @relation(fields: [contentId], references: [id])

  @@id([contentId, country])
}

model ContentContribution {
  contentId            String
  personId             String
  contributionRoleName String

  content          Content          @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  person           Person           @relation(fields: [personId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  contributionRole ContributionRole @relation(fields: [contributionRoleName], references: [name], onDelete: Restrict, onUpdate: Cascade)

  @@id([contentId, personId, contributionRoleName])
}
