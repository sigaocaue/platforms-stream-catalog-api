generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  id          String    @id @default(uuid())
  name        String
  pseudonym   String?
  birthDate   DateTime? @map("birth_date")
  nationality String?
  createdAt   DateTime? @default(now()) @map("created_at")

  contentContributions ContentContribution[]

  @@map("persons")
}

model StreamingPlatform {
  name      String   @id @default(uuid())
  website   String?
  createdAt DateTime @default(now()) @map("created_at")

  contentAvailabilities ContentAvailability[]

  @@map("streaming_platforms")
}

model ContentType {
  name      String   @id
  createdAt DateTime @default(now()) @map("created_at")

  streamingContents StreamingContent[]

  @@map("content_types")
}

model ContributionRole {
  name        String    @id
  description String?
  createdAt   DateTime? @default(now()) @map("created_at")

  contentContributions ContentContribution[]

  @@map("contribution_roles")
}

model StreamingContent {
  id              String    @id @default(uuid())
  contentTypeName String    @map("content_type_name")
  title           String
  releaseDate     DateTime? @map("release_date")
  imdbRating      Float?    @map("imdb_rating")
  duration        Int?
  storyline       String?   @db.Text
  createdAt       DateTime? @default(now()) @map("created_at")

  contentType           ContentType           @relation(fields: [contentTypeName], references: [name], onDelete: Restrict, onUpdate: Cascade)
  contentAvailabilities ContentAvailability[]
  contentContributions  ContentContribution[]
  foreignContentTitles  ForeignContentTitle[]

  @@unique(name: "uniqueKey", [contentTypeName, title, releaseDate])
  @@map("streaming_content")
}

model ContentAvailability {
  id                  String    @id @default(uuid())
  streamingPlatformId String    @map("streaming_platform_id")
  streamingContentId  String    @map("content_id")
  entryDate           DateTime  @map("entry_date")
  exitDate            DateTime? @map("exit_date")
  createdAt           DateTime? @default(now()) @map("created_at")

  streamingContent  StreamingContent  @relation(fields: [streamingContentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  streamingPlatform StreamingPlatform @relation(fields: [streamingPlatformId], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@unique(name: "uniqueKey", [streamingPlatformId, streamingContentId, exitDate])
  @@map("content_availabilities")
}

model ForeignContentTitle {
  id                 String    @id @default(uuid())
  streamingContentId String    @map("streaming_content_id")
  country            String
  localTitle         String    @map("local_title")
  createdAt          DateTime? @default(now()) @map("created_at")

  streamingContent StreamingContent @relation(fields: [streamingContentId], references: [id])

  @@unique(name: "uniqueKey", [streamingContentId, country])
  @@map("foreign_content_title")
}

model ContentContribution {
  id                   String    @id @default(uuid())
  streamingContentId   String    @map("streaming_content_id")
  personId             String    @map("person_id")
  contributionRoleName String    @map("contribution_role_name")
  createdAt            DateTime? @default(now()) @map("created_at")

  streamingContent StreamingContent @relation(fields: [streamingContentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  person           Person           @relation(fields: [personId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  contributionRole ContributionRole @relation(fields: [contributionRoleName], references: [name], onDelete: Restrict, onUpdate: Cascade)

  @@unique(name: "uniqueKey", [streamingContentId, personId, contributionRoleName])
  @@map("content_contributions")
}
