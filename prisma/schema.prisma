generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  id          String    @id @default(uuid())
  name        String
  pseudonym   String?
  birthDate   DateTime? @map("birth_date")
  nationality String?

  ContentContribution ContentContribution[]
}

model StreamingPlatform {
  name    String  @id @default(uuid())
  website String?

  contentAvailabilities ContentAvailability[]
}

model ContentType {
  name     String    @id
  contents Content[]
}

model ContributionRole {
  name        String  @id
  description String?

  ContentContribution ContentContribution[]
}

model StreamingContent {
  id              String    @id @default(uuid())
  contentTypeName String    @map("content_type_name")
  title           String
  releaseDate     DateTime? @map("release_date")
  imdbRating      Float?    @map("imdb_rating")
  duration        Int?
  storyline       String?

  contentType         ContentType           @relation(fields: [contentTypeName], references: [name], onDelete: Restrict, onUpdate: Cascade)
  contentAvailability ContentAvailability[]
  contentPersons      ContentContribution[]
  contentTitle        ContentTitle[]

  @@unique([contentTypeName, title, releaseDate])
}

model ContentAvailability {
  streamingPlatformId String    @map("streaming_platform_id")
  streamingContentId  String    @map("content_id")
  entryDate           DateTime  @map("entry_date")
  exitDate            DateTime? @map("exit_date")

  content           StreamingContent  @relation(fields: [streamingContentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  streamingPlatform StreamingPlatform @relation(fields: [streamingPlatformId], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@id([streamingPlatformId, contentId, entryDate])
  @@unique([streamingPlatformId, contentId, exitDate])
}

model ContentTitle {
  streamingContentId String @map("content_id")
  country            String
  localTitle         String @map("local_title")

  content StreamingContent @relation(fields: [streamingContentId], references: [id])

  @@id([contentId, country])
}

model ContentContribution {
  streamingContentId   String @map("content_id")
  personId             String @map("person_id")
  contributionRoleName String @map("contribution_role_name")

  content          StreamingContent @relation(fields: [streamingContentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  person           Person           @relation(fields: [personId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  contributionRole ContributionRole @relation(fields: [contributionRoleName], references: [name], onDelete: Restrict, onUpdate: Cascade)

  @@id([contentId, personId, contributionRoleName])
}
